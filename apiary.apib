FORMAT: 1A
HOST: http://localhost/api

# Schools API

Schools é uma api para manter informações sobre escolas e seus registros administrativos.

# Authentication

A autentificação de usuário para acesso aos recursos da api, deve ser feita atribuindo
sempre o seguinte cabeçario na requisição:

`authorization: Bearer token_id`

Onde "token id" é obtido durante a autenficação do usuário no microservice de atentificação
auth0 através do dominio "logos.auth0.com".
Veja ver mais detalhes de como realizar essa autentificação nesse link: https://auth0.com/docs 

# Group Auth

Ações relacionadas a autentificação, registro e manutenção de dados do perfil do usuário.

## Request access [/auth/request-access]
### Create a request access [POST]

Registra a solicitação de acesso do usuário.
O usuário é registrado como papel (role) de convidado (guest),
até que algum usuário que tenha permissão para liberação de usuários
confirme a solicitação de acesso e atribua um novo papel (role).

+ Request
    + Headers
    
            authorization: Bearer <token_id>
    
    
+ Response 200 (application/json)
    
    + Attributes 
        + id: 1 (number) - Identificador único da solicitação
        + auth0_user_id: auth0|57c0840deae095471aba4093 (string) - id do usuário
        + status: 0 (number) - Situação da solicitação. 
                             0 pendente
                             1 negada
                             2 aprovada
        + created_at: `2016-08-15 20:26:39` (string) Data que a solicitação foi criada
        + updated_at: `2016-08-15 21:26:39` (string) Data da ultima alteração da solicitação


# Group Schools

Ações relacionadas a manter os dados das escolas (schools) e turmas.

## Schools Collection [/schools{?limit,q,sort,field,with}]

### List Schools [GET]

+ Parameters
    + q (string, optional) - Fulltext search
    + sort (string, optional) - Nome da coluna para ordenação. 
    + limit (number, optional) - Limite por página
    + with (string, optional) - Nome da relação para ser carregada. Veja a [doc](https://github.com/keviocastro/laravel-api-handler#include-related-models) 
    + field (string, optional) - Veja a [doc](https://github.com/keviocastro/laravel-api-handler#filtering)
        
+ Request
    + Headers
            
            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes (SchoolsPaginator)

### Create a New School [POST]

+ Request 
    + Headers
            
            authorization: Bearer <token_id>

+ Request (application/json)

    + Attributes (SchoolFillable)

+ Response 201 (application/json)

    + Headers

            Location: /schools/1

    + Attributes 
        + school (School)
            
## School [/schools/{school_id}]

### View a school detail [GET]

+ Parameters
    + school_id: 1 (number) - ID of the School

+ Request 
    + Headers
            
            authorization: Bearer <token_id>

+ Response  200 (application/json)

    + Attributes (School)
        

### Edit [PUT]

+ Parameters
    + school_id: 1 (number) - ID of the School

+ Request (application/json)

    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (SchoolFillable)
            
+ Response 200 (application/json)
    
    + Attributes (School)


### Delete [DELETE]

+ Parameters
    + school_id: 1 (number) - ID of the School

+ Request (application/json)

    + Headers
            
            authorization: Bearer <token_id>


+ Response 204

## School Classes Collection [/school-classes{?limit,q,sort,field,with}]

### List School Classes [GET]

+ Parameters
    + q (string, optional) - Fulltext search
    + sort (string, optional) - Nome da coluna para ordenação. 
    + limit (number, optional) - Limite por página
    + with (string, optional) - Nome da relação para ser carregada. Veja a [doc](https://github.com/keviocastro/laravel-api-handler#include-related-models) 
    + field (string, optional) - Veja a [doc](https://github.com/keviocastro/laravel-api-handler#filtering)

+ Response 200 (application/json)

    + Attributes (SchoolClasses)
    
### Create a new school class [POST]

+ Request (application/json)
    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (SchoolClassFillable)
            
+ Response 200 (application/json) 
    
    + Attributes (SchoolClass)
            

## School Class [/school-classes/{school_class_id}]

+ Parameters
    - school_class_id (number) - ID of the school class

### View a school class detail [GET]

+ Request 
    + Headers

            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes (SchoolClass)


### Edit [PUT]

+ Request 
    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (SchoolClassFillable)
            
+ Response 200 (application/json)
    
    + Attributes (SchoolClasses)

            
### Delete [DELETE]

+ Response 204


# Group People

## Students Collection [/students{?limit,q,sort,field,with}]

### List students [GET]

+ Parameters
    + q (string, optional) - Fulltext search
    + sort (string, optional) - Nome da coluna para ordenação. 
    + limit (number, optional) - Limite por página
    + with (string, optional) - Nome da relação para ser carregada. Veja a [doc](https://github.com/keviocastro/laravel-api-handler#include-related-models) 
    + field (string, optional) - Veja a [doc](https://github.com/keviocastro/laravel-api-handler#filtering)

+ Request (application/json)
    + Headers
            
            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes (StudentsPaginator)

            
# Group Lessons

Ações relacionadas de programação de aulas.

## Lessons Collection [/lessons]

### List lessons [GET]

+ Request 
    + Headers
            
            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes (Lessons)


### Create a new lesson [POST]

+ Request (application/json)
    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (LessonFillable)
            
+ Response 200 (application/json) 
    
    + Attributes (Lesson)


## Lesson [/lesson/{lesson_id}]

+ Parameters
    - lesson_id (number) - ID of the lesson

### View a lesson detail [GET]

+ Request 
    + Headers

            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes 
        + Lesson (Lesson)

### Edit [PUT]

+ Request 
    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (LessonFillable)
            
+ Response 200 (application/json)
    
    + Attributes (Lesson)


### Delete [DELETE]

+ Response 204


# Group Attendance Records

## Attendance records Collection [/attendance-records{?limit,q,sort,field,with}]

### List attendance records [GET]

+ Request 
    + Headers

            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes (AttendaceRecordPaginator)


### Create a new attendance record [POST]

O registro de presença de um aluno em uma aula é único.
Se o registro de presença que já existe for solicitado, será
retornado o registro já existente e nenhuma alteração será realizada.

+ Request (application/json)
    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (AttendanceRecordFillable)
            
+ Response 200 (application/json) 
    
    + Attributes 
        + attendance_record (AttendanceRecord)

+ Response 409 (application/json) 
    
    {
        "message": "The record of the student to the lesson already exists.",
        "status_code": 409 
    }
            


## Attendance Record [/attendance-record/{id}{?with}]

+ Parameters
    + id (number) - ID of the attendance record
    

### View a attendance record detail [GET]

+ Parameters
    + with (string) - Include related models
        + Members
            + lesson
            + lesson.schoolClass
            + lesson.schoolClass.grade
            + lesson.schoolClass.shift
            + lesson.subject
            + student.person
            + student.schoolClass

+ Request 
    + Headers

            authorization: Bearer <token_id>

+ Response 200 (application/json)

    + Attributes 
        + attendance_record (AttendanceRecord)

### Edit [PUT]

+ Request 
    + Headers
            
            authorization: Bearer <token_id>
            
    + Attributes (AttendanceRecordFillable)
            
+ Response 200 (application/json)
    
    + Attributes 
        + attendance_record (AttendanceRecord)






            
# Data structures 

## SchoolFillable (object)

+ name: Escola luz do saber (string) - Nome da escola

## School (SchoolFillable)

+ id: 1 (number) - Identificador único da escola
+ updated_at: `2016-08-30 13:17:11` (string) - Data da ultima alteração da escola
+ created_at: `2016-08-30 13:17:11` (string) - Data de cadastro

## Schools (array)

+ (School)

## SchoolsPaginator

+ Include (Paginator)
+ data (Schools)

## SchoolClassBase (object)

+ identifier: A (string) - Abreviação/identificação da turma. Exmplo: B, para segunda turma do 1º ano (de 1 Ano B).

## SchoolClassFillable (SchoolClass)

+ grade_id: 1 (number) - Id do ano estudantíl.
+ shift_id: 1 (number) - Id do turno.

## SchoolClass (SchoolClassBase)

+ id: 1 (number) - Identificador único da turma.
+ grade (Grade) - Ano estudantíl (Jardim I/1º Ano/...) da turma.
+ schift (Shift) - Turno (vespertino/matutino/...) da turma.

## SchoolClasses (array)

+ (SchoolClass)

## Grade (object)

+ id: 1 (number) - Identificador único de um ano estudantíl. 
+ name: 3 Ano (string) - Nome do ano estudantíl. Exemplos: 2 Ano, 3 Ano, Jardim I, Jardim II.

## Shift (object)

+ id: 1 (number) - Identificador único do turno.
+ name: Matutino (string) - Nome do turno. Exmplo: Vespertino, matutino, noturno.


## Subject (object)

+ id: 1 (number) - Identificador único da disciplina.
+ name: Matématica  (string) - Nome da disciplina. Ex.: Matématica, Português, Fisica.

# LessonBase (object)

+ start: `2016-08-30 13:17:11` (string) - Data e horário de inicio da aula.
+ end: `2016-08-30 13:17:11` (string) - Data e horário de termino da aula.

# LessonFillable (object)

+ school_class_id: 1 (number) - Identificador único da turma.
+ subject_id: 1 (number) - Identificador único da disciplina (Matématica, física, ...).
+ Include LessonBase

## Lesson (object)

+ id: 1 (number) - Identificador único  da aula.
+ created_at: `2016-08-30 13:17:11` (string) - Data de criação
+ updated_at: `2016-08-30 13:17:11` (string) - Data da ultima alteração
+ Include (LessonBase)
+ school_class (SchoolClass)
+ subject (Subject)

## Lessons (array)

+ (Lesson)

## Person (object)

+ id: 1 (number) - Identificador único da pessoa
+ name: Caio Fernando Chaves (string) - Nome
+ age: 15 (number) - Idade
+ birthday: `2001-04-21` (string) - Data de aniversário
+ piture: `https://randomuser.me/api/portraits/lego/6.jpg` (string) - Foto
+ gender: male (string)
+ `place_of_birth` (City) - Cidade de nascimento
+ more: Mais detalhes sobre a pessoa (string)

## Student (object)

+ Include Person
+ class (SchoolClass)
+ responsible (array)
    + (Person)

## Students (array)

+ (Student)

## StudentsPaginator

+ Include Paginator
+ data (array) 
    + (Student)

## Paginator (object)

+ total: 25 (number) - Total de resultados encontrados
+ per_page: 15 (number) - Quantidade de resultados por página
+ current_page: 1 (number) - Página atual
+ last_page: 2 (number) - Ultima página
+ next_page_url: `http://localhost/api/<resource>?page=2` (string) - Url para resultados da proxima página
+ prev_page_url: null (string, nullable) - Url para resultados da página anterior
+ from: 1 (number) - Número inicial de resultados de paginação da página atual
+ to: 15 (number) - Número final de resultados de paginação da página atual

## City (object)

+ id: 1 (number) - Identificador único da cidade
+ name: Goiânia (string) - Nome da cidade
+ state (State)

## State (object)

+ id: 1 (number) - Identificador único do estado
+ name: Goiás (string) - Nome
+ federated_unit: GO (string) - Código de unidade federativa

## AttendanceRecordFillable (object)

+ lesson_id: 1 (number) - Identificador único da aula relacionada
+ student_id: 1 (number) - Identificador único do aluno
+ presence: 1 (number) - Presença do aluno na aula
                         0 Faltou a aula
                         1 Estava presente

## AttendanceRecord (object)

+ id: 1 (number) - Identificador único do registro de presença
+ Include AttendanceRecordFillable
+ created_at: `2016-08-30 13:17:11` (string) - Data de criação
+ updated_at: `2016-08-30 13:17:11` (string) - Data da ultima alteração

## AttendanceRecords (array)

+ (AttendanceRecord)

## AttendaceRecordPaginator

+ Include (Paginator)
+ data (AttendanceRecords)

## Assessment (object)

+ id: 1 (number) - Identificador único da avaliação
+ name: Avaliação 1 (string)

## StudentGrade

+ id: 1 (number) - Identificador único do registro de nota do aluno
+ grade: 7.5 (number) - Valor de resulta do aluno na avaliação
+ assessment_id: 1 (number) - Identificador da avaliação
+ student_id: 1 (number) - Id do aluno